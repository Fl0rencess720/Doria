// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Fl0rencess720/Doria/src/services/memory/configs"
	"github.com/Fl0rencess720/Doria/src/services/memory/internal/biz"
	"github.com/Fl0rencess720/Doria/src/services/memory/internal/data"
	"github.com/Fl0rencess720/Doria/src/services/memory/internal/data/agent"
	"github.com/Fl0rencess720/Doria/src/services/memory/internal/data/distlock"
	"github.com/Fl0rencess720/Doria/src/services/memory/internal/service"
)

// Injectors from wire.go:

func wireApp() *App {
	string2 := configs.GetServiceName()
	kafkaClient := data.NewKafkaClient()
	db := data.NewPostgres()
	client := data.NewRedis()
	locker := distlock.NewRedisLocker(client)
	memoryRetriever := data.NewMemoryRetriever()
	memoryRepo := data.NewMemoryRepo(kafkaClient, db, client, locker, memoryRetriever)
	llmAgent := agent.NewAgent()
	memoryUseCase := biz.NewMemoryUseCase(memoryRepo, llmAgent)
	memoryService := service.NewMemoryService(string2, memoryUseCase)
	app := NewApp(memoryService)
	return app
}

// wire.go:

type App struct {
	Server *service.MemoryService
}

func NewApp(server *service.MemoryService) *App {
	return &App{
		Server: server,
	}
}
