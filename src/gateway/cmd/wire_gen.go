// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Fl0rencess720/Doria/src/gateway/internal/biz"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/data"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/pkgs/circuitbreaker"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/service"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/service/image"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/service/mate"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/service/middlewares"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/service/signaling"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/service/user"
)

// Injectors from wire.go:

func wireApp() *App {
	ipRateLimiter := middlewares.NewDefaultIPRateLimiter()
	imageRepo := data.NewImageRepo()
	imageServiceClient := data.NewImageClient()
	circuitBreakerManager := circuitbreaker.NewCircuitBreakerManager()
	imageUseCase := biz.NewImageUsecase(imageRepo, imageServiceClient, circuitBreakerManager)
	imageHandler := image.NewImageHandler(imageUseCase)
	userRepo := data.NewUserRepo()
	userServiceClient := data.NewUserClient()
	userUseCase := biz.NewUserUsecase(userRepo, userServiceClient, circuitBreakerManager)
	userHandler := user.NewUserHandler(userUseCase)
	mateRepo := data.NewMateRepo()
	mateServiceClient := data.NewMateClient()
	mateUseCase := biz.NewMateUsecase(mateRepo, mateServiceClient, circuitBreakerManager)
	ttsRepo := data.NewTTSRepo()
	ttsServiceClient := data.NewTTSClient()
	ttsUseCase := biz.NewTTSUsecase(ttsRepo, ttsServiceClient, circuitBreakerManager)
	mateHandler := mate.NewMateHandler(mateUseCase, ttsUseCase)
	httpServer := service.NewHTTPServer(ipRateLimiter, imageHandler, userHandler, mateHandler)
	signalingRepo := data.NewSignalingRepo()
	signalingUseCase := biz.NewSignalingUsecase(signalingRepo)
	signalingHandler := signaling.NewSignalingHandler(signalingUseCase)
	signalingServer := service.NewSignalingServer(signalingHandler)
	app := NewApp(httpServer, signalingServer)
	return app
}

// wire.go:

type App struct {
	HttpServer      *service.HTTPServer
	SignalingServer *service.SignalingServer
}

func NewApp(httpServer *service.HTTPServer, signalingServer *service.SignalingServer) *App {
	return &App{
		HttpServer:      httpServer,
		SignalingServer: signalingServer,
	}
}
