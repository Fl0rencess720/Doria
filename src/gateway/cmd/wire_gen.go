// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"net/http"

	"github.com/Fl0rencess720/Doria/src/gateway/internal/biz"
	"github.com/Fl0rencess720/Doria/src/gateway/internal/data"
	"github.com/Fl0rencess720/Doria/src/gateway/service"
)

// Injectors from wire.go:

func wireApp() *App {
	imageRepo := data.NewImageRepo()
	imageServiceClient := data.NewImageClient()
	imageUsecase := biz.NewImageUsecase(imageRepo, imageServiceClient)
	chatRepo := data.NewChatRepo()
	chatServiceClient := data.NewChatClient()
	chatUseCase := biz.NewChatUseCase(chatRepo, chatServiceClient)
	userRepo := data.NewUserRepo()
	userServiceClient := data.NewUserClient()
	userUsecase := biz.NewUserUsecase(userRepo, userServiceClient)
	ttsRepo := data.NewTTSRepo()
	ttsServiceClient := data.NewTTSClient()
	ttsUsecase := biz.NewTTSUsecase(ttsRepo, ttsServiceClient)
	mateRepo := data.NewMateRepo()
	mateServiceClient := data.NewMateClient()
	mateUsecase := biz.NewMateUsecase(mateRepo, mateServiceClient)
	server := service.NewHTTPServer(imageUsecase, chatUseCase, userUsecase, ttsUsecase, mateUsecase)
	app := NewApp(server)
	return app
}

// wire.go:

type App struct {
	HttpServer *http.Server
}

func NewApp(server *http.Server) *App {
	return &App{
		HttpServer: server,
	}
}
